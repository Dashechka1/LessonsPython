from random import choice, randint
# Функции
"""
    -Функции используются, чтобы избежать дублирования кода
    Например, при написании программы необходимо выполнить
    идентичные действия для разных данных в разных местах
    программы. Для этого придется писать идентичный код каждый
    раз, когда будет необходимо выполнить данные действия,
    что неудобно и ухудшает читаемость и качество кода.

    -Функции позволяют избежать подобных ситуаций.

    -Объявление и синтаксис
    def название():
        тело функции

    -Функции могут не только выполнять какие-то действия, но и
    работать с принимаемыми в них значениями
    def f(a, b, ... ):
        какие-то действия

    -Функции могут возвращать или не возвращать результат
    В случае, если функция должна вернуть результат - это
    необходимо сделать через ключевое слово return

    def f(args):
        ...
        return result

    -Аргументы функции могут иметь произвольный тип данных

    -Функция может возвращать не одно значение
"""


# Рассмотрим несколько примеров
# 1. Простая функция hello без аргументов
def say_hello():
    print("Hello, world!")


# 2. Функция summ(a, b), принимающая два аргумента и
# возвращающая их сумму
def summ(a, b):
    return a + b


# 3. Функция, print_list(arr),
# принимающая список и выводящая его на экран
def print_list(arr):
    for item in arr:
        print(item)


# 4. Функция get_nums, которая принимает количество чисел
# и возвращает все введенные пользователем числа
def get_nums(n):
    res = []
    for i in range(n):
        res.append(float(input("Введите число: ")))
    return res


# Значения аргументов по умолчанию
# Для аргументов можно задать значение по умолчанию. В этом
# случае при вызове функции не будет обязательна передача
# этих аргументов. Если аргумент не будет передан - будет
# подставлено значение по умолчанию
def f(n=1):
    return n


# Вызов функций
# Для того, чтобы вызвать функцию в данной точке программы
# необходимо записать ее имя и в скобках передать необходимые
# аргументы
# say_hello()
# d = summ(3, 4)
# print(d)
# print(summ(5, 4))
# print_list([1, 4, 5, 6, 7])
# print(get_nums(3))
# print(f())
# print(f(5))

# Вложенные функции
# Иногда бывает удобно использовать функцию внутри
# другой функции для проведения промежуточных операций

"""
def f1(a, b, c):
    действия
    def f2():
        промежуточные действия
        return d, e, f
    g = f2()
"""

# Анонимные функции
# Для произведения небольших операций, например вычисления
# значения математического выражения можно использовать
# анонимные функции


f0 = lambda x, y, z: x ** 2 - (y ** 2 + z ** 2) ** 0.5
# print(f0(2, 3, 4))


# Рекурсивные функции
def fact(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * fact(n - 1)


# return 3 * 2 * 1
# 6
# print(fact(3))


# Про списки и рекурсию
a = [3, -4, 5, 35, -123, 33, 45, 44]


# Алгоритмы сортировки
# BubleSort
def buble_sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - 1):
            if arr[i] < arr[j]:
                arr[i], arr[j] = arr[j], arr[i]
    return arr


# Быстрая сортировка QuickSort
# O(n * ln2(n))


def quick_sort(arr):
    if len(arr) < 2:
        return arr

    pivot = choice(arr)
    less = []
    greater = []
    middle = []
    for item in arr:
        if item < pivot:
            less.append(item)
        elif item > pivot:
            greater.append(item)
        else:
            middle.append(item)

    return quick_sort(less) + middle + quick_sort(greater)


print(quick_sort([randint(-100, 100) for _ in range(100000)]))
